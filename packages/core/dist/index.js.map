{"mappings":"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","sources":["packages/core/src/index.ts","packages/core/src/card.ts","packages/core/src/deck.ts","packages/core/src/player.ts","packages/core/src/game.ts","packages/core/src/emitter.ts","packages/core/src/state.ts"],"sourcesContent":["export * from \"./card\"\nexport * from \"./deck\"\nexport * from \"./player\"\nexport * from \"./game\"\nexport * from \"./emitter\"\nexport * from \"./state\"","export const cardType = [\n\t\"wild\",\n\t\"draw-4\",\n\t\"draw-2\",\n\t\"reverse\",\n\t\"skip\",\n\t\"0\",\n\t\"1\",\n\t\"2\",\n\t\"3\",\n\t\"4\",\n\t\"5\",\n\t\"6\",\n\t\"7\",\n\t\"8\",\n\t\"9\",\n] as const\n\nexport type CardType = (typeof cardType)[number]\n\nexport const cardColor = [\n\t\"black\",\n\t\"red\",\n\t\"green\",\n\t\"blue\",\n\t\"yellow\",\n] as const\n\nexport type CardColor = (typeof cardColor)[number]\n\nexport class Card {\n\tconstructor(\n\t\tpublic readonly color: CardColor,\n\t\tpublic readonly type: CardType,\n\t) {}\n\n\tstatic fromId(id: number) {\n\t\tconst t = cardType[id & 0xf]\n\t\tif (!t) {\n\t\t\tthrow new Error(\"invalid cardType\")\n\t\t}\n\t\tconst c = cardColor[id >>> 4 & 0xf]\n\t\tif (!c) {\n\t\t\tthrow new Error(\"invalid cardColor\")\n\t\t}\n\t\treturn new Card(c, t)\n\t}\n\n\tstatic fromIds(ids: number[]) {\n\t\treturn ids.map(id => Card.fromId(id)) as Card[]\n\t}\n\n\tclone() {\n\t\treturn new Card(this.color, this.type)\n\t}\n\n\tid() {\n\t\tconst t = cardType.indexOf(this.type)\n\t\tconst c = cardColor.indexOf(this.color)\n\t\treturn c << 4 | t\n\t}\n\n\tvalid(): boolean {\n\t\tif (this.color === \"black\") {\n\t\t\treturn [\"wild\", \"draw-4\"].includes(this.type)\n\t\t}\n\t\treturn true\n\t}\n\n\tequal(card: Card) {\n\t\tif ([\"wild\", \"draw-4\"].includes(this.type)) {\n\t\t\treturn card.type === this.type\n\t\t}\n\t\treturn this.type === card.type && this.color === card.color\n\t}\n\n\tplayable(prev: Card) {\n\t\tif ([\"wild\", \"draw-4\"].includes(this.type)) {\n\t\t\treturn true\n\t\t}\n\t\tif (this.color === prev.color) {\n\t\t\treturn true\n\t\t}\n\t\tif (this.type === prev.type) {\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n}","import type { CardColor } from \"./card\"\nimport { Card } from \"./card\"\n\nexport class Deck {\n\tcards: Card[] = []\n\t#current: Card[] = []\n\n\tconstructor(cards: Card[]) {\n\t\tthis.cards = cards\n\t\tthis.reset()\n\t}\n\n\tcurrent() {\n\t\treturn Array.from(this.#current)\n\t}\n\n\treset() {\n\t\tthis.#current = Array.from(this.cards)\n\t\tthis.shuffle()\n\t}\n\n\tshuffle() {\n\t\tthis.#current = this\n\t\t\t.current()\n\t\t\t.sort(() => Math.random() - 0.5)\n\t}\n\n\tdraw(c: number): Card[] {\n\t\treturn this.cards.splice(0, c)\n\t}\n\n\tmustDraw(c: number) {\n\t\tconst card = this.draw(c)\n\t\tif (card.length < c) {\n\t\t\tthrow new Error(\"not enough card remaining\")\n\t\t}\n\t\treturn card\n\t}\n}\n\nexport class StandardDeck extends Deck {\n\tstatic readonly cards = [\n\t\tnew Card(\"black\", \"wild\"),\n\t\tnew Card(\"black\", \"wild\"),\n\t\tnew Card(\"black\", \"wild\"),\n\t\tnew Card(\"black\", \"wild\"),\n\t\t\n\t\tnew Card(\"black\", \"draw-4\"),\n\t\tnew Card(\"black\", \"draw-4\"),\n\t\tnew Card(\"black\", \"draw-4\"),\n\t\tnew Card(\"black\", \"draw-4\"),\n\t\t\n\t\t...cardSets(\"red\"),\n\t\t...cardSets(\"green\"),\n\t\t...cardSets(\"blue\"),\n\t\t...cardSets(\"yellow\"),\n\t]\n\n\tconstructor() {\n\t\tsuper(StandardDeck.cards)\n\t}\n}\n\nfunction cardSets(color: CardColor): Card[] {\n\treturn [\n\t\tnew Card(color, \"0\"),\n\t\tnew Card(color, \"1\"),\n\t\tnew Card(color, \"2\"),\n\t\tnew Card(color, \"3\"),\n\t\tnew Card(color, \"4\"),\n\t\tnew Card(color, \"5\"),\n\t\tnew Card(color, \"6\"),\n\t\tnew Card(color, \"7\"),\n\t\tnew Card(color, \"8\"),\n\t\tnew Card(color, \"9\"),\n\t\tnew Card(color, \"reverse\"),\n\t\tnew Card(color, \"skip\"),\n\t\tnew Card(color, \"draw-2\"),\n\t\tnew Card(color, \"1\"),\n\t\tnew Card(color, \"2\"),\n\t\tnew Card(color, \"3\"),\n\t\tnew Card(color, \"4\"),\n\t\tnew Card(color, \"5\"),\n\t\tnew Card(color, \"6\"),\n\t\tnew Card(color, \"7\"),\n\t\tnew Card(color, \"8\"),\n\t\tnew Card(color, \"9\"),\n\t\tnew Card(color, \"reverse\"),\n\t\tnew Card(color, \"skip\"),\n\t\tnew Card(color, \"draw-2\"),\n\t]\n}","import { Card } from \"./card\"\n\nexport class Player {\n\t#hand: Card[] = []\n\n\tconstructor(\n\t\tpublic name: string,\n\t) {}\n\n\thand() {\n\t\treturn Array.from(this.#hand)\n\t}\n\n\thasCard(card: Card): boolean {\n\t\treturn !!this.hand().find(c => c.equal(card))\n\t}\n}","import { Emitter } from \"./emitter\"\nimport { State, state } from \"./state\"\nimport { Card } from \"./card\"\nimport { Player } from \"./player\"\nimport { Deck } from \"./deck\"\n\nexport class Game {}\n","export class Emitter<T = {}> {\n\t#listeners: Record<string, Array<(v: unknown)=>void>> = {}\n\n\ton<K extends keyof T, L extends (v: T[K]) => void>(k: K, l: L) {\n\t\tconst ls = this.#listeners[k as string] ??= []\n\t\tls.push(l as (v: unknown) => void)\n\t\treturn () => { \n\t\t\tthis.#listeners[k as string] = this.#listeners[k as string].filter(fn => fn !== l)\n\t\t}\n\t}\n\n\temit<K extends keyof T>(k: K, v: T[K]) {\n\t\tconst ls = this.#listeners[k as string] ??= []\n\t\tls.forEach(f => f(v))\n\t}\n}","import { Emitter } from \"./emitter\"\n\nexport type StateEvents = {\n\tchange: [k: string, v: unknown]\n}\n\nexport type State<T> = T & Emitter<StateEvents> & StateMethod\nexport type StateMethod = {\n\treset(): void\n}\n\nexport function state<T = {}>(v: T): State<T> {\n\tlet s = Object.assign({}, v) as T\n\tconst e = new Emitter<StateEvents>()\n\tconst method = {\n\t\treset() {\n\t\t\ts = Object.assign({}, v) as T\n\t\t},\n\t\tchange(k: keyof T) {\n\t\t\te.emit(\"change\", [k, s[k]])\n\t\t}\n\t}\n\treturn new Proxy(e, {\n\t\tget(target, key, receivver) {\n\t\t\tif (key in e) {\n\t\t\t\treturn e[key]\n\t\t\t}\n\t\t\tif (key in method) {\n\t\t\t\treturn method[key]\n\t\t\t}\n\t\t\tif (key in s) {\n\t\t\t\treturn s[key]\n\t\t\t}\n\t\t},\n\t\tset(target, key, value, receivver) {\n\t\t\ts[key as any] = value\n\t\t\tmethod.change(key as any)\n\t\t\treturn true\n\t\t}\n\t}) as State<T>\n}\n"],"names":[],"version":3,"file":"index.js.map"}